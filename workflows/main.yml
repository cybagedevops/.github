
name: Auto Assign PR Reviewers


on:
  pull_request:
    types: [opened, ready_for_review]

jobs:
  assign-reviewers:
    runs-on: ubuntu-latest
    steps:
      - name: Auto Assign Team from Custom Property
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            async function assignReviewersFromCustomProperty() {
              try {
                console.log(`Processing PR #${context.issue.number} in ${context.repo.owner}/${context.repo.repo}`);
                
                // Step 1: Get repository custom properties
                const repoProperties = await github.request('GET /repos/{owner}/{repo}/properties/values', {
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  headers: {
                    'X-GitHub-Api-Version': '2022-11-28'
                  }
                });
                
                console.log('Repository custom properties:', JSON.stringify(repoProperties.data, null, 2));
                
                // Step 2: Find team properties (supports multiple team properties)
                const teamProperties = repoProperties.data.filter(property => 
                  property.property_name.toLowerCase().includes('team') ||
                  property.property_name.toLowerCase().includes('reviewer')
                );
                
                if (teamProperties.length === 0) {
                  console.log('No team properties found in custom properties');
                  return;
                }
                
                // Step 3: Get organization teams
                const teams = await github.rest.teams.list({
                  org: context.repo.owner,
                  per_page: 100
                });
                
                console.log(`Found ${teams.data.length} teams in organization`);
                
                // Step 4: Get current reviewers to avoid duplicates
                const currentReviewers = await github.rest.pulls.listRequestedReviewers({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.issue.number
                });
                
                const currentTeamSlugs = currentReviewers.data.teams.map(t => t.slug);
                const teamsToAssign = [];
                const assignedProperties = [];
                
                // Step 5: Process each team property
                for (const teamProperty of teamProperties) {
                  const teamName = teamProperty.value;
                  
                  if (!teamName) {
                    console.log(`Team property ${teamProperty.property_name} exists but has no value`);
                    continue;
                  }
                  
                  console.log(`Processing team property: ${teamProperty.property_name} = ${teamName}`);
                  
                  // Handle comma-separated team names
                  const teamNames = teamName.split(',').map(name => name.trim());
                  
                  for (const singleTeamName of teamNames) {
                    // Find the team by name (case-insensitive)
                    const team = teams.data.find(t => 
                      t.name.toLowerCase() === singleTeamName.toLowerCase() ||
                      t.slug.toLowerCase() === singleTeamName.toLowerCase().replace(/\s+/g, '-')
                    );
                    
                    if (!team) {
                      console.log(`Team "${singleTeamName}" not found in organization`);
                      continue;
                    }
                    
                    // Check if team is already assigned
                    if (currentTeamSlugs.includes(team.slug)) {
                      console.log(`Team ${team.name} is already assigned as reviewer`);
                      continue;
                    }
                    
                    // Check if we're already planning to assign this team
                    if (teamsToAssign.includes(team.slug)) {
                      console.log(`Team ${team.name} already in assignment queue`);
                      continue;
                    }
                    
                    teamsToAssign.push(team.slug);
                    assignedProperties.push(`${teamProperty.property_name} = ${singleTeamName}`);
                    console.log(`Queued team "${team.name}" for assignment`);
                  }
                }
                
                if (teamsToAssign.length === 0) {
                  console.log('No new teams to assign');
                  return;
                }
                
                // Step 6: Assign teams as reviewers
                await github.rest.pulls.requestReviewers({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: context.issue.number,
                  team_reviewers: teamsToAssign
                });
                
                console.log(`âœ… Successfully assigned ${teamsToAssign.length} teams as reviewers`);
                
                // Step 7: Add success comment
                const teamNames = teamsToAssign.map(slug => 
                  teams.data.find(t => t.slug === slug)?.name || slug
                ).join(', ');
                
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: `ðŸ¤– **Auto-assigned reviewers**\n\n**${teamNames}** have been automatically assigned as reviewers based on repository custom properties.\n\n_Properties:_\n${assignedProperties.map(prop => `- ${prop}`).join('\n')}`
                });
                
              } catch (error) {
                console.error('Error in auto-assignment:', error);
                
                // Add error comment
                try {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: context.issue.number,
                    body: `ðŸ¤– **Auto-reviewer assignment error**\n\nFailed to automatically assign reviewer: ${error.message}\n\nPlease check repository custom properties and team permissions.`
                  });
                } catch (commentError) {
                  console.error('Failed to add error comment:', commentError);
                }
                
                core.setFailed(`Auto-assignment failed: ${error.message}`);
              }
            }
            
            await assignReviewersFromCustomProperty();
